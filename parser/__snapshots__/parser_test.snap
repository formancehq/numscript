[TestPlainAddress - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:15, Line:1},
                },
                Name: "src",
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:21, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestVariable - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:27, Line:1},
                },
                Name: "example_var_src",
            },
            Destination: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:33, Line:2},
                },
                Name: "example_var_dest",
            },
        },
    },
}
---

[TestAllotment - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.SourceAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:27, Line:1},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:13, Line:1},
                            End:   parser.Position{Character:25, Line:1},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:13, Line:1},
                                End:   parser.Position{Character:16, Line:1},
                            },
                            Numerator:   0x1,
                            Denominator: 0x3,
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:22, Line:1},
                                End:   parser.Position{Character:25, Line:1},
                            },
                            Name: "s1",
                        },
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:18, Line:2},
                },
                Name: "d",
            },
        },
    },
}
---

[TestAllotmentPerc - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:7},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.SourceAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:3, Line:5},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:4, Line:2},
                            End:   parser.Position{Character:16, Line:2},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:4, Line:2},
                                End:   parser.Position{Character:7, Line:2},
                            },
                            Numerator:   0x2a,
                            Denominator: 0x64,
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:13, Line:2},
                                End:   parser.Position{Character:16, Line:2},
                            },
                            Name: "s1",
                        },
                    },
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:3},
                            End:   parser.Position{Character:13, Line:3},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:1, Line:3},
                                End:   parser.Position{Character:4, Line:3},
                            },
                            Numerator:   0x1,
                            Denominator: 0x2,
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:10, Line:3},
                                End:   parser.Position{Character:13, Line:3},
                            },
                            Name: "s2",
                        },
                    },
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:4},
                            End:   parser.Position{Character:19, Line:4},
                        },
                        Allotment: &parser.RemainingAllotment{
                            Range: parser.Range{
                                Start: parser.Position{Character:1, Line:4},
                                End:   parser.Position{Character:10, Line:4},
                            },
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:16, Line:4},
                                End:   parser.Position{Character:19, Line:4},
                            },
                            Name: "s3",
                        },
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:6},
                    End:   parser.Position{Character:18, Line:6},
                },
                Name: "d",
            },
        },
    },
}
---

[TestAllotmentPercFloating - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.SourceAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:28, Line:1},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:13, Line:1},
                            End:   parser.Position{Character:26, Line:1},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:13, Line:1},
                                End:   parser.Position{Character:18, Line:1},
                            },
                            Numerator:   0xf2,
                            Denominator: 0x2710,
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:24, Line:1},
                                End:   parser.Position{Character:26, Line:1},
                            },
                            Name: "s",
                        },
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:18, Line:2},
                },
                Name: "d",
            },
        },
    },
}
---

[TestAllotmentDest - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:13, Line:1},
                },
                Name: "s",
            },
            Destination: &parser.DestinationAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:29, Line:2},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:18, Line:2},
                            End:   parser.Position{Character:27, Line:2},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:18, Line:2},
                                End:   parser.Position{Character:21, Line:2},
                            },
                            Numerator:   0x1,
                            Denominator: 0x2,
                        },
                        To: &parser.DestinationTo{
                            Destination: &parser.AccountLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:25, Line:2},
                                    End:   parser.Position{Character:27, Line:2},
                                },
                                Name: "d",
                            },
                        },
                    },
                },
            },
        },
    },
}
---

[TestCapped - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.SourceCapped{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:35, Line:1},
                },
                From: &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:31, Line:1},
                        End:   parser.Position{Character:35, Line:1},
                    },
                    Name: "src",
                },
                Cap: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:15, Line:1},
                        End:   parser.Position{Character:25, Line:1},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:16, Line:1},
                            End:   parser.Position{Character:21, Line:1},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:22, Line:1},
                            End:   parser.Position{Character:24, Line:1},
                        },
                        Number: 10,
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:21, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestCappedVariable - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.SourceCapped{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:32, Line:1},
                },
                From: &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:28, Line:1},
                        End:   parser.Position{Character:32, Line:1},
                    },
                    Name: "src",
                },
                Cap: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:15, Line:1},
                        End:   parser.Position{Character:22, Line:1},
                    },
                    Name: "my_var",
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:21, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestNested - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:7},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.SourceInorder{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:3, Line:5},
                },
                Sources: {
                    &parser.SourceCapped{
                        Range: parser.Range{
                            Start: parser.Position{Character:4, Line:2},
                            End:   parser.Position{Character:27, Line:2},
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:23, Line:2},
                                End:   parser.Position{Character:27, Line:2},
                            },
                            Name: "src",
                        },
                        Cap: &parser.MonetaryLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:8, Line:2},
                                End:   parser.Position{Character:17, Line:2},
                            },
                            Asset: &parser.AssetLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:9, Line:2},
                                    End:   parser.Position{Character:13, Line:2},
                                },
                                Asset: "COIN",
                            },
                            Amount: &parser.NumberLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:14, Line:2},
                                    End:   parser.Position{Character:16, Line:2},
                                },
                                Number: 42,
                            },
                        },
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:3},
                            End:   parser.Position{Character:3, Line:3},
                        },
                        Name: "a",
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:4},
                            End:   parser.Position{Character:3, Line:4},
                        },
                        Name: "b",
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:6},
                    End:   parser.Position{Character:21, Line:6},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestMultipleSends - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{Character:1, Line:1},
                End:   parser.Position{Character:53, Line:1},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:6, Line:1},
                        End:   parser.Position{Character:15, Line:1},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:7, Line:1},
                            End:   parser.Position{Character:11, Line:1},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:1},
                            End:   parser.Position{Character:14, Line:1},
                        },
                        Number: 10,
                    },
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:27, Line:1},
                    End:   parser.Position{Character:31, Line:1},
                },
                Name: "src",
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:46, Line:1},
                    End:   parser.Position{Character:51, Line:1},
                },
                Name: "dest",
            },
        },
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{Character:1, Line:2},
                End:   parser.Position{Character:53, Line:2},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:6, Line:2},
                        End:   parser.Position{Character:15, Line:2},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:7, Line:2},
                            End:   parser.Position{Character:11, Line:2},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:2},
                            End:   parser.Position{Character:14, Line:2},
                        },
                        Number: 20,
                    },
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:27, Line:2},
                    End:   parser.Position{Character:31, Line:2},
                },
                Name: "src",
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:46, Line:2},
                    End:   parser.Position{Character:51, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---
[TestEmptyVars - 1]
parser.Program{}
---

[TestSingleVar - 1]
parser.Program{
    Vars: {
        {
            Range: parser.Range{
                Start: parser.Position{Character:7, Line:0},
                End:   parser.Position{Character:23, Line:0},
            },
            Name: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:0},
                    End:   parser.Position{Character:23, Line:0},
                },
                Name: "my_var",
            },
            Type: &parser.TypeDecl{
                Range: parser.Range{
                    Start: parser.Position{Character:7, Line:0},
                    End:   parser.Position{Character:15, Line:0},
                },
                Name: "monetary",
            },
            Origin: (*parser.FnCall)(nil),
        },
    },
    Statements: nil,
}
---

[TestVariableMonetary - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:13, Line:0},
                    },
                    Name: "example",
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:13, Line:1},
                },
                Name: "a",
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:18, Line:2},
                },
                Name: "b",
            },
        },
    },
}
---

[TestAllotmentDestRemaining - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:6},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:13, Line:1},
                },
                Name: "s",
            },
            Destination: &parser.DestinationAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:3, Line:5},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:3, Line:3},
                            End:   parser.Position{Character:12, Line:3},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:3, Line:3},
                                End:   parser.Position{Character:6, Line:3},
                            },
                            Numerator:   0x1,
                            Denominator: 0x2,
                        },
                        To: &parser.DestinationTo{
                            Destination: &parser.AccountLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:10, Line:3},
                                    End:   parser.Position{Character:12, Line:3},
                                },
                                Name: "d",
                            },
                        },
                    },
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:4},
                            End:   parser.Position{Character:17, Line:4},
                        },
                        Allotment: &parser.RemainingAllotment{
                            Range: parser.Range{
                                Start: parser.Position{Character:1, Line:4},
                                End:   parser.Position{Character:10, Line:4},
                            },
                        },
                        To: &parser.DestinationTo{
                            Destination: &parser.AccountLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:14, Line:4},
                                    End:   parser.Position{Character:17, Line:4},
                                },
                                Name: "d2",
                            },
                        },
                    },
                },
            },
        },
    },
}
---

[TestAllotmentVariableSource - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:5},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.SourceAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:3, Line:3},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:2},
                            End:   parser.Position{Character:11, Line:2},
                        },
                        Allotment: &parser.VariableLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:1, Line:2},
                                End:   parser.Position{Character:3, Line:2},
                            },
                            Name: "x",
                        },
                        From: &parser.AccountLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:9, Line:2},
                                End:   parser.Position{Character:11, Line:2},
                            },
                            Name: "a",
                        },
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:4},
                    End:   parser.Position{Character:18, Line:4},
                },
                Name: "d",
            },
        },
    },
}
---

[TestOverdraftUnbounded - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:7, Line:0},
                    },
                    Name: "x",
                },
            },
            Source: &parser.SourceOverdraft{
                Range: parser.Range{
                    Start: parser.Position{Character:10, Line:1},
                    End:   parser.Position{Character:43, Line:1},
                },
                Address: &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:10, Line:1},
                        End:   parser.Position{Character:14, Line:1},
                    },
                    Name: "src",
                },
                Bounded: (*parser.Literal)(nil),
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:15, Line:2},
                    End:   parser.Position{Character:20, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestOverdraftUnboundedVariable - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:7, Line:0},
                    },
                    Name: "x",
                },
            },
            Source: &parser.SourceOverdraft{
                Range: parser.Range{
                    Start: parser.Position{Character:10, Line:1},
                    End:   parser.Position{Character:50, Line:1},
                },
                Address: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:10, Line:1},
                        End:   parser.Position{Character:21, Line:1},
                    },
                    Name: "my_src_var",
                },
                Bounded: (*parser.Literal)(nil),
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:15, Line:2},
                    End:   parser.Position{Character:20, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestBoundedOverdraft - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:7, Line:0},
                    },
                    Name: "x",
                },
            },
            Source: &parser.SourceOverdraft{
                Range: parser.Range{
                    Start: parser.Position{Character:10, Line:1},
                    End:   parser.Position{Character:57, Line:1},
                },
                Address: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:10, Line:1},
                        End:   parser.Position{Character:21, Line:1},
                    },
                    Name: "my_src_var",
                },
                Bounded: &&parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:47, Line:1},
                        End:   parser.Position{Character:57, Line:1},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:48, Line:1},
                            End:   parser.Position{Character:52, Line:1},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:53, Line:1},
                            End:   parser.Position{Character:56, Line:1},
                        },
                        Number: 100,
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:15, Line:2},
                    End:   parser.Position{Character:20, Line:2},
                },
                Name: "dest",
            },
        },
    },
}
---

[TestFunctionCallNoArgs - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.FnCall{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:12, Line:0},
            },
            Caller: &parser.FnCallIdentifier{
                Range: parser.Range{
                    Start: parser.Position{},
                    End:   parser.Position{Character:10, Line:0},
                },
                Name: "example_fn",
            },
            Args: nil,
        },
    },
}
---

[TestFunctionCallOneArg - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.FnCall{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:20, Line:0},
            },
            Caller: &parser.FnCallIdentifier{
                Range: parser.Range{
                    Start: parser.Position{},
                    End:   parser.Position{Character:10, Line:0},
                },
                Name: "example_fn",
            },
            Args: {
                &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:11, Line:0},
                        End:   parser.Position{Character:19, Line:0},
                    },
                    Name: "example",
                },
            },
        },
    },
}
---

[TestFunctionCallManyArgs - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.FnCall{
            Range: parser.Range{
                Start: parser.Position{Character:0, Line:1},
                End:   parser.Position{Character:1, Line:7},
            },
            Caller: &parser.FnCallIdentifier{
                Range: parser.Range{
                    Start: parser.Position{Character:0, Line:1},
                    End:   parser.Position{Character:10, Line:1},
                },
                Name: "example_fn",
            },
            Args: {
                &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:1, Line:2},
                        End:   parser.Position{Character:10, Line:2},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:2, Line:2},
                            End:   parser.Position{Character:6, Line:2},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:7, Line:2},
                            End:   parser.Position{Character:9, Line:2},
                        },
                        Number: 42,
                    },
                },
                &parser.NumberLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:1, Line:3},
                        End:   parser.Position{Character:4, Line:3},
                    },
                    Number: 100,
                },
                &parser.RatioLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:1, Line:4},
                        End:   parser.Position{Character:4, Line:4},
                    },
                    Numerator:   0x1,
                    Denominator: 0x2,
                },
                &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:1, Line:5},
                        End:   parser.Position{Character:8, Line:5},
                    },
                    Name: "my_var",
                },
                &parser.StringLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:1, Line:6},
                        End:   parser.Position{Character:14, Line:6},
                    },
                    String: "example_str",
                },
            },
        },
    },
}
---

[TestVarOrigin - 1]
parser.Program{
    Vars: {
        {
            Range: parser.Range{
                Start: parser.Position{Character:1, Line:2},
                End:   parser.Position{Character:49, Line:2},
            },
            Name: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:10, Line:2},
                    End:   parser.Position{Character:17, Line:2},
                },
                Name: "my_var",
            },
            Type: &parser.TypeDecl{
                Range: parser.Range{
                    Start: parser.Position{Character:1, Line:2},
                    End:   parser.Position{Character:9, Line:2},
                },
                Name: "monetary",
            },
            Origin: &parser.FnCall{
                Range: parser.Range{
                    Start: parser.Position{Character:20, Line:2},
                    End:   parser.Position{Character:49, Line:2},
                },
                Caller: &parser.FnCallIdentifier{
                    Range: parser.Range{
                        Start: parser.Position{Character:20, Line:2},
                        End:   parser.Position{Character:29, Line:2},
                    },
                    Name: "origin_fn",
                },
                Args: {
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:30, Line:2},
                            End:   parser.Position{Character:41, Line:2},
                        },
                        Name: "my_account",
                    },
                    &parser.StringLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:43, Line:2},
                            End:   parser.Position{Character:48, Line:2},
                        },
                        String: "str",
                    },
                },
            },
        },
    },
    Statements: nil,
}
---

[TestInorderSource - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.SourceInorder{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:22, Line:1},
                },
                Sources: {
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:13, Line:1},
                            End:   parser.Position{Character:16, Line:1},
                        },
                        Name: "s1",
                    },
                    &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:17, Line:1},
                            End:   parser.Position{Character:20, Line:1},
                        },
                        Name: "s2",
                    },
                },
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:18, Line:2},
                },
                Name: "d",
            },
        },
    },
}
---

[TestInorderDestination - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:7},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:9, Line:0},
                    },
                    Name: "amt",
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:13, Line:1},
                },
                Name: "s",
            },
            Destination: &parser.DestinationInorder{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:3, Line:6},
                },
                Clauses: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:3},
                            End:   parser.Position{Character:15, Line:3},
                        },
                        Cap: &parser.VariableLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:5, Line:3},
                                End:   parser.Position{Character:8, Line:3},
                            },
                            Name: "m1",
                        },
                        To: &parser.DestinationTo{
                            Destination: &parser.AccountLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:12, Line:3},
                                    End:   parser.Position{Character:15, Line:3},
                                },
                                Name: "d1",
                            },
                        },
                    },
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:1, Line:4},
                            End:   parser.Position{Character:16, Line:4},
                        },
                        Cap: &parser.MonetaryLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:5, Line:4},
                                End:   parser.Position{Character:11, Line:4},
                            },
                            Asset: &parser.AssetLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:6, Line:4},
                                    End:   parser.Position{Character:7, Line:4},
                                },
                                Asset: "C",
                            },
                            Amount: &parser.NumberLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:8, Line:4},
                                    End:   parser.Position{Character:10, Line:4},
                                },
                                Number: 42,
                            },
                        },
                        To: &parser.DestinationKept{
                            Range: parser.Range{
                                Start: parser.Position{Character:12, Line:4},
                                End:   parser.Position{Character:16, Line:4},
                            },
                        },
                    },
                },
                Remaining: &parser.DestinationTo{
                    Destination: &parser.AccountLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:14, Line:5},
                            End:   parser.Position{Character:17, Line:5},
                        },
                        Name: "d3",
                    },
                },
            },
        },
    },
}
---

[TestSendAll - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueAll{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:14, Line:0},
                },
                Asset: &parser.AssetLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:6, Line:0},
                        End:   parser.Position{Character:11, Line:0},
                    },
                    Asset: "ASSET",
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:10, Line:1},
                    End:   parser.Position{Character:12, Line:1},
                },
                Name: "a",
            },
            Destination: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:15, Line:2},
                    End:   parser.Position{Character:17, Line:2},
                },
                Name: "b",
            },
        },
    },
}
---

[TestAllotmentDestKept - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:16, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:11, Line:0},
                        },
                        Asset: "EUR/2",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:12, Line:0},
                            End:   parser.Position{Character:15, Line:0},
                        },
                        Number: 100,
                    },
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:13, Line:1},
                },
                Name: "s",
            },
            Destination: &parser.DestinationAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:28, Line:2},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:18, Line:2},
                            End:   parser.Position{Character:26, Line:2},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:18, Line:2},
                                End:   parser.Position{Character:21, Line:2},
                            },
                            Numerator:   0x1,
                            Denominator: 0x2,
                        },
                        To: &parser.DestinationKept{
                            Range: parser.Range{
                                Start: parser.Position{Character:22, Line:2},
                                End:   parser.Position{Character:26, Line:2},
                            },
                        },
                    },
                },
            },
        },
    },
}
---

[TestWhitespaceInRatio - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{Character:0, Line:1},
                End:   parser.Position{Character:1, Line:6},
            },
            SentValue: &parser.SentValueLiteral{
                Monetary: &parser.VariableLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:1},
                        End:   parser.Position{Character:9, Line:1},
                    },
                    Name: "var",
                },
            },
            Source: &parser.AccountLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:2},
                    End:   parser.Position{Character:17, Line:2},
                },
                Name: "world",
            },
            Destination: &parser.DestinationAllotment{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:3},
                    End:   parser.Position{Character:3, Line:5},
                },
                Items: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:4, Line:4},
                            End:   parser.Position{Character:22, Line:4},
                        },
                        Allotment: &parser.RatioLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:4, Line:4},
                                End:   parser.Position{Character:9, Line:4},
                            },
                            Numerator:   0x1,
                            Denominator: 0x6,
                        },
                        To: &parser.DestinationTo{
                            Destination: &parser.AccountLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:13, Line:4},
                                    End:   parser.Position{Character:22, Line:4},
                                },
                                Name: "player:1",
                            },
                        },
                    },
                },
            },
        },
    },
}
---
