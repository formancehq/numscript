
[TestFaultToleranceVarName - 1]
parser.Program{
    Vars: {
        {
            Range: parser.Range{
                Start: parser.Position{Character:7, Line:0},
                End:   parser.Position{Character:18, Line:0},
            },
            Name: (*parser.VariableLiteral)(nil),
            Type: &parser.TypeDecl{
                Range: parser.Range{
                    Start: parser.Position{Character:7, Line:0},
                    End:   parser.Position{Character:15, Line:0},
                },
                Name: "monetary",
            },
            Origin: (*parser.FnCall)(nil),
        },
    },
    Statements: nil,
}
---

[TestFaultToleranceSend - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:4, Line:0},
            },
            SentValue:   nil,
            Source:      nil,
            Destination: nil,
        },
    },
}
---

[TestFaultToleranceMonetary - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:11, Line:0},
            },
            SentValue:   nil,
            Source:      nil,
            Destination: nil,
        },
    },
}
---

[TestFaultToleranceNoAddr - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:5},
            },
            SentValue: nil,
            Source:    &parser.SourceInorder{
                Range: parser.Range{
                    Start: parser.Position{Character:11, Line:1},
                    End:   parser.Position{Character:3, Line:3},
                },
                Sources: nil,
            },
            Destination: nil,
        },
    },
}
---

[TestFaultToleranceInvalidDest - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:14, Line:0},
                },
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:14, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:10, Line:0},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:11, Line:0},
                            End:   parser.Position{Character:13, Line:0},
                        },
                        Number: 10,
                    },
                },
            },
            Source: &parser.SourceAccount{
                Literal: &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:13, Line:1},
                        End:   parser.Position{Character:15, Line:1},
                    },
                    Name: "a",
                },
            },
            Destination: nil,
        },
    },
}
---

[TestFaultToleranceInvalidSrcTk - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:1, Line:3},
            },
            SentValue: &parser.SentValueLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:14, Line:0},
                },
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:14, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:10, Line:0},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:11, Line:0},
                            End:   parser.Position{Character:13, Line:0},
                        },
                        Number: 10,
                    },
                },
            },
            Source: &parser.SourceCapped{
                Range: parser.Range{
                    Start: parser.Position{Character:13, Line:1},
                    End:   parser.Position{Character:16, Line:1},
                },
                From: nil,
                Cap:  nil,
            },
            Destination: &parser.DestinationAccount{
                Literal: &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:18, Line:2},
                        End:   parser.Position{Character:20, Line:2},
                    },
                    Name: "d",
                },
            },
        },
    },
}
---

[TestFaultToleranceTrailingComma - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.FnCall{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:16, Line:0},
            },
            Caller: &parser.FnCallIdentifier{
                Range: parser.Range{
                    Start: parser.Position{},
                    End:   parser.Position{Character:11, Line:0},
                },
                Name: "set_tx_meta",
            },
            Args: {
                &parser.NumberLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:12, Line:0},
                        End:   parser.Position{Character:13, Line:0},
                    },
                    Number: 1,
                },
                nil,
            },
        },
    },
}
---

[TestFaultToleranceDestinationNoRemainingMispelledFrom - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SendStatement{
            Range: parser.Range{
                Start: parser.Position{},
                End:   parser.Position{Character:2, Line:5},
            },
            SentValue: &parser.SentValueLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:0},
                    End:   parser.Position{Character:14, Line:0},
                },
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:0},
                        End:   parser.Position{Character:14, Line:0},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:0},
                            End:   parser.Position{Character:10, Line:0},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:11, Line:0},
                            End:   parser.Position{Character:13, Line:0},
                        },
                        Number: 10,
                    },
                },
            },
            Source: &parser.SourceAccount{
                Literal: &parser.AccountLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:11, Line:1},
                        End:   parser.Position{Character:13, Line:1},
                    },
                    Name: "a",
                },
            },
            Destination: &parser.DestinationInorder{
                Range: parser.Range{
                    Start: parser.Position{Character:16, Line:2},
                    End:   parser.Position{Character:3, Line:4},
                },
                Clauses: {
                    {
                        Range: parser.Range{
                            Start: parser.Position{Character:3, Line:3},
                            End:   parser.Position{Character:3, Line:4},
                        },
                        Cap: &parser.MonetaryLiteral{
                            Range: parser.Range{
                                Start: parser.Position{Character:7, Line:3},
                                End:   parser.Position{Character:16, Line:3},
                            },
                            Asset: &parser.AssetLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:8, Line:3},
                                    End:   parser.Position{Character:12, Line:3},
                                },
                                Asset: "COIN",
                            },
                            Amount: &parser.NumberLiteral{
                                Range: parser.Range{
                                    Start: parser.Position{Character:13, Line:3},
                                    End:   parser.Position{Character:15, Line:3},
                                },
                                Number: 10,
                            },
                        },
                        To: nil,
                    },
                },
                Remaining: nil,
            },
        },
    },
}
---

[TestFaultToleranceIncompleteOrigin - 1]
parser.Program{
    Vars: {
        {
            Range: parser.Range{
                Start: parser.Position{Character:1, Line:2},
                End:   parser.Position{Character:11, Line:2},
            },
            Name: &parser.VariableLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:7, Line:2},
                    End:   parser.Position{Character:9, Line:2},
                },
                Name: "a",
            },
            Type: &parser.TypeDecl{
                Range: parser.Range{
                    Start: parser.Position{Character:1, Line:2},
                    End:   parser.Position{Character:6, Line:2},
                },
                Name: "asset",
            },
            Origin: (*parser.FnCall)(nil),
        },
    },
    Statements: nil,
}
---

[TestFaultToleranceIncompleteSave - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SaveStatement{
            Range: parser.Range{
                Start: parser.Position{Character:0, Line:1},
                End:   parser.Position{Character:4, Line:1},
            },
            SentValue: nil,
            Literal:   nil,
        },
    },
}
---

[TestFaultToleranceIncompleteSave2 - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SaveStatement{
            Range: parser.Range{
                Start: parser.Position{Character:0, Line:1},
                End:   parser.Position{Character:14, Line:1},
            },
            SentValue: &parser.SentValueLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:1},
                    End:   parser.Position{Character:14, Line:1},
                },
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:1},
                        End:   parser.Position{Character:14, Line:1},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:1},
                            End:   parser.Position{Character:10, Line:1},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:11, Line:1},
                            End:   parser.Position{Character:13, Line:1},
                        },
                        Number: 10,
                    },
                },
            },
            Literal: nil,
        },
    },
}
---

[TestFaultToleranceIncompleteSave3 - 1]
parser.Program{
    Vars:       nil,
    Statements: {
        &parser.SaveStatement{
            Range: parser.Range{
                Start: parser.Position{Character:0, Line:1},
                End:   parser.Position{Character:19, Line:1},
            },
            SentValue: &parser.SentValueLiteral{
                Range: parser.Range{
                    Start: parser.Position{Character:5, Line:1},
                    End:   parser.Position{Character:14, Line:1},
                },
                Monetary: &parser.MonetaryLiteral{
                    Range: parser.Range{
                        Start: parser.Position{Character:5, Line:1},
                        End:   parser.Position{Character:14, Line:1},
                    },
                    Asset: &parser.AssetLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:6, Line:1},
                            End:   parser.Position{Character:10, Line:1},
                        },
                        Asset: "COIN",
                    },
                    Amount: &parser.NumberLiteral{
                        Range: parser.Range{
                            Start: parser.Position{Character:11, Line:1},
                            End:   parser.Position{Character:13, Line:1},
                        },
                        Number: 10,
                    },
                },
            },
            Literal: nil,
        },
    },
}
---
